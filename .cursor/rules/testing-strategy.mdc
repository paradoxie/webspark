---
description: 
globs: 
alwaysApply: false
---
# 规则文档：测试策略 (testing-strategy.mdc)

本文件定义了`WebSpark.club`项目的自动化测试策略，旨在通过不同层次的测试来保障代码质量、减少回归Bug，并确保核心功能的稳定性。

## 1. 测试金字塔模型

我们将遵循测试金字塔原则，将测试投入主要集中在底层，向上逐层减少。
- **基础 (大量):** 单元测试
- **中间 (适量):** 集成测试
- **顶层 (少量):** 端到端测试

## 2. 单元测试 (Unit Tests)

- **目标:** 测试最小的可测试单元（函数、组件的纯逻辑部分）的正确性。
- **工具:**
  - **后端 (Strapi):** **Jest**。
  - **前端 (Next.js):** **Jest** + **React Testing Library (RTL)**。
- **测试范围:**
  - **后端:**
    - 所有的Service层函数（如排序算法、数据处理逻辑）。
    - 独立的工具函数。
  - **前端:**
    - 纯UI组件的渲染和基本交互（给定props，断言其正确渲染）。
    - 自定义的Hooks (`use...`)。
    - 工具/辅助函数。
- **原则:**
  - 快速、独立，不涉及数据库或网络请求（使用mock）。
  - 每个测试用例只关注一个功能点。

## 3. 集成测试 (Integration Tests)

- **目标:** 测试多个单元协同工作的正确性。
- **工具:** 与单元测试相同，但会涉及模拟的API请求。
  - **前端:** 使用 **Mock Service Worker (MSW)** 来拦截和模拟API请求。
- **测试范围:**
  - **后端:** 测试Controller层能否正确调用Service、处理请求并返回预期的响应。可以连接到测试专用的数据库。
  - **前端:**
    - 测试一个完整的页面或功能模块。例如，测试一个表单组件，用户填写->点击提交->断言是否发起了正确的API请求->根据模拟的成功/失败响应，断言UI是否正确更新。
    - 测试涉及多个组件联动的场景。
- **原则:**
  - 模拟外部依赖（如API），但测试内部模块间的真实交互。

## 4. 端到端测试 (E2E Tests) - (MVP后引入)

- **目标:** 从用户的视角，在真实的浏览器环境中，模拟完整的用户场景，验证整个应用的流程是否通畅。
- **工具:** **Cypress** 或 **Playwright**。
- **测试场景示例:**
  - **核心提交流程:**
    1. 访问首页。
    2. 点击登录按钮，通过模拟的GitHub登录。
    3. 跳转到提交页面。
    4. 完整填写表单并提交。
    5. 断言页面是否显示成功提示。
    6. 跳转到个人中心，断言刚刚提交的作品是否以“待审核”状态出现在列表中。
  - **用户交互流程:**
    1. 访问一个作品详情页。
    2. 点击点赞按钮。
    3. 断言点赞数是否+1。
    4. 刷新页面，断言点赞状态是否保持。
- **原则:**
  - 数量少而精，只覆盖最核心、最关键的用户旅程。
  - 运行在独立的、数据可随时重置的测试环境中。