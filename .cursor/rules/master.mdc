---
description: 
globs: 
alwaysApply: true
---
好的，我完全理解你的意思了。你是希望得到一个**“创世级别”**的、极其详尽的、几乎涵盖了我们所有讨论过的功能点的**“超级提示词”**。这个提示词将作为整个项目的最高纲领，你可以随时回顾它，并从中抽取片段来指导Cursor完成具体的子任务。

这个超级提示词将不仅仅是代码指令，更是一份完整的产品需求文档 (PRD) 和技术设计文档 (TDD) 的结合体。

---

### 超级提示词：【WebSpark.club】项目创世蓝图

你好，Cursor。我们将携手从零开始，构建一个名为 **WebSpark.club** 的全栈Web应用。我将担任此项目的首席架构师和产品经理，你将是我的核心执行工程师。这份文档是我们整个项目的“真理之源”，包含了所有的产品需求、功能规格、技术决策和设计原则。在后续所有开发过程中，我们都将以此为准。

**项目使命：** 为Web开发者社群创建一个充满活力的作品展示、灵感碰撞和交流互动的俱乐部。

---

### 第一部分：产品与功能规格 (Product & Feature Specifications)

#### 1. 核心用户旅程 (Core User Journeys)
*   **访客 (Visitor):** 浏览首页 -> 通过分类/搜索发现作品 -> 进入作品详情页 -> 访问作品原站 -> 被吸引并决定加入。
*   **创作者 (Creator):** 使用GitHub登录 -> 完善个人资料 -> 提交自己的Web作品 -> 在个人中心查看作品状态 -> 收到点赞和评论 -> 与他人互动。
*   **管理员 (Admin):** 登录后台 -> 审核新提交的作品 -> 将优质作品设为“精选” -> 管理用户和内容 -> 查看数据洞察。

#### 2. 功能模块详述 (Feature Modules)

**2.1 用户系统 (User System)**
*   **认证:**
    *   **唯一登录方式:** GitHub OAuth。不提供邮箱/密码注册。
    *   **会话管理:** 使用NextAuth.js处理前端会话，并同步Strapi后端返回的JWT。
*   **个人中心 (`/dashboard`):**
    *   **个人资料:** 可编辑个人简介、社交链接。GitHub用户名和头像自动同步。
    *   **我的作品:** 列表展示自己提交的所有作品，并清晰标注其状态（待审核/已通过/已拒绝）。
        *   **操作:** 提供“编辑”和“软删除”按钮。编辑后作品需重新进入审核队列。
    *   **我的收藏:** 展示用户收藏的所有作品列表。
    *   **成就统计:** 可视化展示获得的总点赞数、总浏览量，以及最受欢迎的作品。

**2.2 作品展示 (Showcase)**
*   **首页 (`/`):**
    *   **编辑精选区:** 手动推荐的优质作品轮播或卡片展示。
    *   **主列表:** 响应式网格布局，默认按 `(点赞数 * 5) + 提交时间戳` 的混合算法降序排列。
    *   **加载方式:** 初始加载一页，滚动到底部时提供“加载更多”按钮。
*   **作品详情页 (`/sites/[slug]`):**
    *   **SEO优化:** 静态生成(SSG)，动态生成`<title>`和`<meta>`标签。
    *   **布局:** 双栏。左侧为作品截图、访问原站/源码按钮；右侧为详细信息。
    *   **信息展示:** 标题、作者（可点击）、标签、详细描述（Markdown渲染）、技术栈。
*   **分类/标签页 (`/tags/[tagSlug]`):**
    *   展示所有包含特定标签的作品列表。
*   **搜索功能:**
    *   提供全局搜索框，对作品的标题、简介、标签、作者名进行全文搜索。

**2.3 互动系统 (Interaction System)**
*   **点赞:** 登录用户可对作品进行点赞/取消点赞。操作实时反馈，并更新总数。
*   **收藏:** 登录用户可收藏/取消收藏作品。
*   **评论系统:** (V2功能)
    *   在作品详情页下方，实现一个评论区。
    *   支持Markdown、@用户、回复等功能。
    *   初期可考虑使用Giscus（基于GitHub Discussions）快速集成。
*   **举报:** 任何用户都可对作品进行举报，并选择举报理由。后台有专门的管理队列。

**2.4 作品提交流程 (Submission Flow)**
*   **提交入口:** 仅对登录用户开放，路径为`/submit`。
*   **提交表单:**
    *   包含所有必填项：URL、标题、简短描述、详细描述(Markdown)、标签选择。
    *   可选填项：源码链接、求职/合作状态标记。
*   **提交后处理:**
    *   后端对URL进行基本格式验证。
    *   作品存入数据库，状态为`PENDING`。
    *   前端提示用户“提交成功，等待审核”。

**2.5 管理后台 (Admin Panel)**
*   **技术:** 使用Strapi自动生成的后台。
*   **核心功能:**
    *   **审核工作台:** 集中展示所有`PENDING`状态的作品，可进行“通过”或“拒绝”（需填写理由）操作。
    *   **内容管理:** 对所有作品进行CRUD操作，包括设为“精选”、修改信息、软删除/恢复。
    *   **用户管理:** 查看用户列表，可进行封禁等操作。
    *   **数据洞察:** (V2功能) 提供关键指标（新增用户/作品/点赞）的图表化展示。

---

### 第二部分：技术架构与实施方案 (Technical Architecture & Implementation)

#### 1. 总体架构
*   **前端:** Next.js (App Router, TypeScript, Tailwind CSS)
*   **后端:** Strapi (TypeScript, PostgreSQL)
*   **认证:** NextAuth.js (前端) + Strapi Users & Permissions Plugin (后端)
*   **部署模型:** **方案A (Hybrid)**
    *   **前端:** 部署于 **Cloudflare Pages**，实现CI/CD和全球分发。
    *   **后端:** 部署于**自有服务器** (如云主机)，使用**Docker**和**docker-compose**进行容器化管理。
    *   **流量网关:** 后端API (`api.webspark.club`) 的流量必须经过 **Cloudflare** 的安全代理。

#### 2. 数据库模型 (PostgreSQL via Strapi)
*   **核心表:** `websites`, `users` (来自插件), `tags`, `comments` (V2), `likes` (多对多关联表), `bookmarks` (多对多关联表)。
*   **关键字段:**
    *   `websites.status`: `ENUM('PENDING', 'APPROVED', 'REJECTED')`
    *   `websites.deletedAt`: `datetime` (用于软删除)
    *   关联关系必须清晰定义。

#### 3. API设计
*   遵循RESTful风格。Strapi自动生成基础CRUD API。
*   **需手动创建的自定义API:**
    *   `PUT /api/websites/:id/like` (点赞/取消)
    *   `PUT /api/websites/:id/bookmark` (收藏/取消)
    *   `GET /api/websites/sorted` (获取按混合算法排序的列表)
    *   `POST /api/report` (处理举报)

#### 4. 自动化与运维 (DevOps)
*   **CI/CD:**
    *   **前端:** GitHub仓库连接到Cloudflare Pages，`main`分支push自动部署。
    *   **后端:** 使用**GitHub Actions**。`main`分支push后，自动构建Docker镜像，推送到镜像仓库，然后通过SSH触发服务器上的`docker-compose`更新。
*   **数据备份:** 必须配置每日的PostgreSQL数据库自动备份，并异地存储到对象存储服务。
*   **监控与日志:** 配置基础的服务器监控和应用日志收集。

#### 5. 法律与合规
*   必须包含**《服务条款》**和**《隐私政策》**页面。
*   需提供清晰的**版权侵权投诉 (DMCA)** 指引和联系方式。
*   若项目本身代码开源，需选择并添加**开源许可证** (如MIT)。

---

**执行准则：**
*   **代码质量:** 所有代码需遵循强类型（TypeScript），并附有必要的注释。
*   **组件化:** 前端UI必须高度组件化、可复用。
*   **安全性:** 所有密钥和敏感信息必须通过环境变量管理，严禁硬编码。
*   **迭代开发:** 我们将遵循MVP（最小可行产品）原则，优先完成核心的展示、提交、审核、登录功能，然后逐步迭代完善互动系统和高级功能。

请确认你已完全理解这份创世蓝图。我们的第一步将是搭建后端的开发环境和数据模型。