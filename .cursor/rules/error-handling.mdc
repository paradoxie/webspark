---
description: 
globs: 
alwaysApply: true
---
# 规则文档：错误处理与用户反馈规范 (error-handling.mdc)

本文件定义了`WebSpark.club`全站统一的错误处理策略和用户反馈机制。目的是在出现问题时，为用户提供清晰、一致、有帮助的指引，提升整体健壮性和用户体验。

## 1. 前端API错误处理策略

所有使用`fetch`或数据请求库（如SWR/React Query）进行的API调用，都必须根据HTTP状态码进行分类处理。

- **`2xx` (成功):**
  - **`200 OK` / `201 Created`:** 正常处理数据。对于写操作（POST, PUT, DELETE），应使用Toast组件给予明确的成功反馈，如“作品提交成功！”。
- **`4xx` (客户端错误):**
  - **`401 Unauthorized` / `403 Forbidden`:**
    - **处理方式:** 调用NextAuth的`signOut()`方法，并强制将用户重定向到登录页面。
    - **用户提示:** 无需直接提示，重定向本身就是最明确的反馈。
  - **`404 Not Found`:**
    - **处理方式:** 在页面级数据获取中，调用Next.js的`notFound()`函数，渲染`app/not-found.tsx`页面。
    - **用户提示:** 展示一个专门设计的404页面，包含有趣的插图和返回首页的链接。
  - **`422 Unprocessable Entity` / `400 Bad Request`:**
    - **场景:** 主要用于表单提交时的服务端校验失败。
    - **处理方式:** API应返回包含具体字段错误的JSON。前端`react-hook-form`的`onSubmit`函数需捕获此错误，并使用`setError()`方法将错误信息附加到对应的表单字段上。
    - **用户提示:** 在表单字段下方直接显示具体的错误信息，如“此URL已被提交”。
- **`5xx` (服务端错误):**
  - **处理方式:** 这是非预期错误。前端应捕获此错误，并阻止后续操作。
  - **用户提示:** 显示一个通用的、非技术性的错误Toast通知，如：“糟糕！服务器开小差了，请稍后再试或联系我们。”
  - **日志记录:** (V2功能) 考虑使用Sentry等工具，在捕获到5xx错误时自动上报，以便开发团队能及时发现和修复问题。

## 2. 用户反馈组件规范

- **Toast / Snackbar 通知:**
  - **库:** `react-hot-toast`。
  - **用途:** 用于短暂的、非阻塞性的信息提示（如操作成功、一般性错误）。
  - **样式:**
    - **Success:** 绿色图标和边框。
    - **Error:** 红色图标和边框。
    - **Info:** 蓝色图标和边框。
- **模态框 (Modal / Dialog):**
  - **用途:** 用于需要用户中断当前任务并进行确认的**危险操作**，如“您确定要删除这个作品吗？”。
  - **结构:** 包含标题、描述性内容、一个“确认”按钮（通常是主色或危险色）和一个“取消”按钮。
- **空状态 (Empty State):**
  - **用途:** 当列表类数据为空时（如“我的作品”、“搜索结果”），必须显示空状态。
  - **结构:** 一个表意的插图、一个主标题（如“这里空空如也”）和一段引导性文字（如“快去提交你的第一个作品吧！”），可附带一个主要操作按钮。