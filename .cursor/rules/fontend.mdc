---
description: 
globs: 
alwaysApply: true
---
# 任务：【前端】作品提交流程与表单校验

你好，Cursor。现在我们来攻克一个交互最复杂的页面：作品提交页。这个页面的用户体验直接决定了我们社区内容的产出率。

## 1. 目标与需求
- **文件路径:** `app/submit/page.tsx`
- **访问权限:** 此页面为**受保护路由**。未登录用户访问时，应被`next-auth`中间件重定向到登录页。
- **核心功能:**
  1. 提供一个结构清晰的多部分表单。
  2. 实现强大的**客户端实时校验**，在用户输入时就给予反馈。
  3. 支持Markdown输入的实时预览。
  4. 处理表单的提交状态（loading, success, error），并向用户提供清晰的反馈。

## 2. 技术实现细节
- **表单库:** 我们将使用 **`react-hook-form`** 来管理表单状态，并结合 **`zod`** 来定义和执行校验规则。这是一个健壮且流行的组合。
- **`zod` Schema 定义:**
  - `url`: 必须是有效的URL。
  - `title`: 字符串，最小长度5，最大长度50。
  - `shortDescription`: 字符串，最小长度20，最大长度160。
  - `description`: 字符串，最小长度100。
  - `tags`: 一个字符串数组，至少选择1个标签，最多5个。
- **UI组件与布局 (使用Tailwind CSS和自定义组件):**
  - **`Input`组件:** 创建一个可复用的`Input`组件，它能集成`react-hook-form`的`register`和`errors`，自动显示错误信息。
  - **`Textarea`组件:** 同上，用于`shortDescription`。
  - **`MarkdownEditor`组件:**
    - 这是一个关键组件。左侧是`textarea`供用户输入Markdown，右侧是实时预览区。
    - 你可以使用`react-markdown`或`marked`来实现预览功能。
    - 当用户输入时，`textarea`的值通过`react-hook-form`进行管理。
  - **`TagSelector`组件:**
    - 允许用户从一个预设的标签列表（从API获取）中选择，也允许用户输入并创建新标签。
    - 当用户输入时，可以有自动补全的建议。
    - 已选择的标签会以胶囊(Pill)样式显示在输入框内。
- **表单提交流程:**
  - **`onSubmit`函数:**
    1. 当表单通过`zod`校验后，此函数被触发。
    2. 设置一个`isSubmitting`状态为`true`，禁用提交按钮，并显示一个加载动画(Spinner)。
    3. 使用`fetch`调用后端的`POST /api/websites`接口，请求头需要带上从`useSession`获取的Strapi JWT。
    4. **处理API响应:**
       - **成功 (2xx):** 重置表单，显示一个成功的Toast通知（如使用`react-hot-toast`），并可以将用户重定向到他的“我的提交”页面。
       - **失败 (4xx/5xx):** 在表单下方显示一个总体的错误信息，并重新启用提交按钮。

## 3. 注意事项
- **用户体验:** 校验错误信息必须清晰地指出问题所在（例如“请输入一个有效的网址”）。当输入框获得焦点或输入时，错误信息应实时更新或消失。
- **状态管理:** 表单的所有状态（值、错误、提交状态）都应由`react-hook-form`统一管理，避免手动的`useState`混乱。
- **组件拆分:** 将表单拆分成多个逻辑清晰的子组件，`page.tsx`只负责组织和提交逻辑。

请为我生成实现上述功能的完整代码，包括`page.tsx`、`zod` schema定义、以及所有必要的子组件。