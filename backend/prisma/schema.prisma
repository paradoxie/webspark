generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int       @id @default(autoincrement())
  email              String    @unique
  username           String    @unique
  githubId           String    @unique
  name               String?
  avatar             String?
  bio                String?   @db.Text
  website            String?
  github             String? // GitHub用户名
  location           String?
  emailNotifications Boolean   @default(true)
  isActive           Boolean   @default(true)
  isHiring           Boolean   @default(false) // 添加招聘状态字段
  role               UserRole  @default(USER) // 用户角色
  lastLoginAt        DateTime? // 添加最后登录时间
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Relations
  websites      Website[]
  comments      Comment[]
  notifications Notification[]
  reports       Report[]
  likedComments Comment[]      @relation("CommentLikes")

  // 关注关系 - 多对多自关联
  following User[] @relation("UserFollows")
  followers User[] @relation("UserFollows")

  // 保存的搜索
  savedSearches SavedSearch[]
  searchHistory SearchHistory[]

  // 网站点击记录
  websiteClicks WebsiteClick[]
  websiteLikes  WebsiteLike[]
  userBookmarks Bookmark[]

  // 推荐反馈
  recommendationFeedbacks RecommendationFeedback[]

  // 新增关系
  followersRel Follow[] @relation("UserFollowers")
  followingRel Follow[] @relation("UserFollowing")
  activities Activity[] @relation("UserActivities")
  notificationSettings NotificationSettings? @relation("UserNotificationSettings")
  pushSubscriptions PushSubscription[] @relation("UserPushSubscriptions")
  apiKeys ApiKey[] @relation("UserApiKeys")
  trustedDevices TrustedDevice[] @relation("UserTrustedDevices")
  userCommentLikes CommentLike[] @relation("UserCommentLikes")

  @@map("users")
}

model Website {
  id               Int       @id @default(autoincrement())
  title            String    @db.VarChar(50)
  slug             String    @unique
  url              String    @db.VarChar(500)
  shortDescription String    @db.VarChar(160)
  description      String    @db.Text
  sourceUrl        String?   @db.VarChar(500)
  screenshots      Json? // 存储截图URL数组
  status           Status    @default(PENDING)
  featured         Boolean   @default(false)
  likeCount        Int       @default(0)
  viewCount        Int       @default(0)
  isHiring         Boolean   @default(false)
  deletedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  // Relations
  authorId      Int
  author        User           @relation(fields: [authorId], references: [id])
  categoryId    Int?
  category      Category?      @relation(fields: [categoryId], references: [id])
  tags          Tag[]          @relation("WebsiteTags")
  comments      Comment[]
  notifications Notification[]
  reports       Report[]

  // 新增关系
  websiteClicks WebsiteClick[]
  websiteLikes  WebsiteLike[]
  bookmarks     Bookmark[]

  // 推荐反馈
  recommendationFeedbacks RecommendationFeedback[]

  @@map("websites")
}

model Category {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(30)
  slug        String   @unique
  description String?  @db.VarChar(200)
  icon        String?  @db.VarChar(50) // emoji or icon name
  color       String?  @db.VarChar(7)
  sortOrder   Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  websites Website[]

  @@map("categories")
}

model Tag {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(30)
  slug        String   @unique
  description String?  @db.VarChar(200)
  color       String?  @db.VarChar(7)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  websites Website[] @relation("WebsiteTags")

  @@map("tags")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  likeCount Int      @default(0)
  status    CommentStatus @default(APPROVED)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  websiteId     Int
  website       Website        @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  authorId      Int
  author        User           @relation(fields: [authorId], references: [id])
  notifications Notification[]
  likedBy       User[]         @relation("CommentLikes")
  commentLikes  CommentLike[]  @relation("CommentLikedByUsers")

  // 回复关系（自关联）
  parentId Int?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")

  @@map("comments")
}

model Notification {
  id        Int              @id @default(autoincrement())
  type      NotificationType
  title     String           @db.VarChar(100)
  message   String           @db.VarChar(500)
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 关联的资源（可选）
  websiteId Int?
  website   Website? @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  commentId Int?
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Report {
  id        Int          @id @default(autoincrement())
  reason    ReportReason
  details   String?      @db.VarChar(500)
  status    ReportStatus @default(OPEN)
  createdAt DateTime     @default(now())

  // Relations
  websiteId  Int
  website    Website @relation(fields: [websiteId], references: [id])
  reporterId Int?
  reporter   User?   @relation(fields: [reporterId], references: [id])

  @@map("reports")
}

model SavedSearch {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(100) // 用户自定义的搜索名称
  query     String   @db.VarChar(500) // 搜索查询字符串
  filters   Json? // 保存的筛选条件 (category, tags, etc.)
  isActive  Boolean  @default(true) // 是否激活
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("saved_searches")
}

model SearchHistory {
  id        Int      @id @default(autoincrement())
  query     String   @db.VarChar(500) // 搜索查询字符串
  filters   Json? // 搜索时的筛选条件
  results   Int      @default(0) // 搜索结果数量
  createdAt DateTime @default(now())
  searchedAt DateTime @default(now())

  // Relations
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("search_history")
}

// 新增模型：网站点击记录
model WebsiteClick {
  id        Int     @id @default(autoincrement())
  websiteId Int
  website   Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  userId    Int?
  user      User?   @relation(fields: [userId], references: [id])

  // 点击详情
  ipAddress String? @db.VarChar(45)
  userAgent String? @db.Text
  referrer  String? @db.VarChar(500)
  clickType String  @default("view") // view, external_link, etc.

  createdAt DateTime @default(now())

  @@index([websiteId, createdAt])
  @@index([userId, createdAt])
  @@map("website_clicks")
}

// 新增模型：网站点赞记录
model WebsiteLike {
  id        Int     @id @default(autoincrement())
  websiteId Int
  website   Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([websiteId, userId])
  @@map("website_likes")
}

// 新增模型：收藏记录
model Bookmark {
  id        Int     @id @default(autoincrement())
  websiteId Int
  website   Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  userId    Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([websiteId, userId])
  @@map("bookmarks")
}

// 新增模型：推荐反馈
model RecommendationFeedback {
  id                 Int                @id @default(autoincrement())
  userId             Int
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  websiteId          Int
  website            Website            @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  recommendationType RecommendationType
  rating             Int // 1-5 star rating
  feedback           String?            @db.Text
  context            Json? // Additional context data
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt

  @@unique([userId, websiteId, recommendationType, createdAt(sort: Desc)], name: "unique_daily_feedback")
  @@index([userId, createdAt])
  @@index([websiteId, rating])
  @@index([recommendationType, rating])
  @@map("recommendation_feedback")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum ReportReason {
  SPAM
  INAPPROPRIATE_CONTENT
  COPYRIGHT_INFRINGEMENT
  BROKEN_LINK
  OTHER
}

enum ReportStatus {
  OPEN
  CLOSED
}

enum NotificationType {
  WEBSITE_APPROVED
  WEBSITE_REJECTED
  WEBSITE_LIKED
  WEBSITE_COMMENTED
  COMMENT_REPLIED
  COMMENT_LIKED
  USER_FOLLOWED
  SYSTEM
}

enum RecommendationType {
  PERSONALIZED
  SIMILAR_USERS
  TRENDING
  HYBRID
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  DELETED
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  follower    User     @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)
  followingId Int
  following   User     @relation("UserFollowers", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
  @@map("follows")
}

model Activity {
  id        Int          @id @default(autoincrement())
  userId    Int
  user      User         @relation("UserActivities", fields: [userId], references: [id], onDelete: Cascade)
  type      ActivityType
  metadata  Json?
  createdAt DateTime     @default(now())

  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@map("activities")
}

enum ActivityType {
  WEBSITE_CREATED
  WEBSITE_LIKED
  WEBSITE_VIEWED
  COMMENT_POSTED
  USER_FOLLOWED
  WEBSITE_BOOKMARKED
}

model NotificationSettings {
  id              Int      @id @default(autoincrement())
  userId          Int      @unique
  user            User     @relation("UserNotificationSettings", fields: [userId], references: [id], onDelete: Cascade)
  emailEnabled    Boolean  @default(true)
  pushEnabled     Boolean  @default(true)
  smsEnabled      Boolean  @default(false)
  quietHoursStart Int?
  quietHoursEnd   Int?
  blockedTypes    Json?
  preferredChannels Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("notification_settings")
}

model PushSubscription {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation("UserPushSubscriptions", fields: [userId], references: [id], onDelete: Cascade)
  endpoint     String   @db.Text
  keys         Json
  failureCount Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
  @@map("push_subscriptions")
}

model ApiKey {
  id          Int      @id @default(autoincrement())
  userId      Int
  user        User     @relation("UserApiKeys", fields: [userId], references: [id], onDelete: Cascade)
  key         String   @unique
  name        String
  permissions Json
  lastUsedAt  DateTime?
  expiresAt   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@map("api_keys")
}

model TrustedDevice {
  id         Int      @id @default(autoincrement())
  userId     Int
  user       User     @relation("UserTrustedDevices", fields: [userId], references: [id], onDelete: Cascade)
  deviceHash String
  name       String?
  lastUsedAt DateTime @default(now())
  createdAt  DateTime @default(now())

  @@unique([userId, deviceHash])
  @@index([userId])
  @@map("trusted_devices")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  commentId Int
  comment   Comment  @relation("CommentLikedByUsers", fields: [commentId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation("UserCommentLikes", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([commentId, userId])
  @@index([commentId])
  @@index([userId])
  @@map("comment_likes")
}
